<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Moos3</title>
    <link>http://blog.guthnur.net/tags/aws/</link>
    <description>Recent content in Aws on Moos3</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Fri, 16 Sep 2016 16:19:59 -0400</lastBuildDate>
    <atom:link href="http://blog.guthnur.net/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Setup Google SSO and AWS</title>
      <link>http://blog.guthnur.net/aws-google-sso/</link>
      <pubDate>Fri, 16 Sep 2016 16:19:59 -0400</pubDate>
      
      <guid>http://blog.guthnur.net/aws-google-sso/</guid>
      <description>

&lt;p&gt;This article contains the files needed to wire up our Google Apps SSO to aws. Enorder to setup the AWS sso in additional accounts you will need the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aws Account keys with Admin access&lt;/li&gt;
&lt;li&gt;Google Admin access&lt;/li&gt;
&lt;li&gt;aws cli tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup-google-apps&#34;&gt;Setup Google Apps&lt;/h2&gt;

&lt;p&gt;First we will need to setup a Custom Schema element to hold role information for our users. By default, when you map attributes for SAML apps the pass Role to AWS you&amp;rsquo;ll only be able to select from existing attribute on your users.
Examples include Job Title, Cost Center and Department. I&amp;rsquo;ve seen other articles that mention putting a signle role ARN in one of these but it&amp;rsquo;s really not suitable for that information (especially if you use those fields already).&lt;/p&gt;

&lt;h4 id=&#34;the-solution-is-to-setup-a-custom-attribute-https-support-google-com-a-answer-6327792-hl-en-for-your-users&#34;&gt;The Solution is to setup a &lt;a href=&#34;https://support.google.com/a/answer/6327792?hl=en&#34;&gt;Custom Attribute&lt;/a&gt; for your users.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://developers.google.com/admin-sdk/directory/v1/reference/schemas/insert#try-it&#34;&gt;Schema Insert Page&lt;/a&gt; in Google Admin Console&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;my_customer&lt;/code&gt; in &lt;code&gt;customerId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To the right of the Request Body, select &lt;code&gt;FreeForm Editor&lt;/code&gt; from the dropdown list and then pase the following (schemaName should be either SSO or AWS_SAML):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;fields&amp;quot;:
  [
    {
      &amp;quot;fieldName&amp;quot;: &amp;quot;role&amp;quot;,
      &amp;quot;fieldType&amp;quot;: &amp;quot;STRING&amp;quot;,
      &amp;quot;multiValued&amp;quot;: true,
      &amp;quot;readAccessType&amp;quot;: &amp;quot;ADMINS_AND_SELF&amp;quot;
    }
  ],
  &amp;quot;schemaName&amp;quot;: &amp;quot;SSO&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Then Click &lt;code&gt;Authorize and Execute&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-the-google-apps-saml-app-for-aws&#34;&gt;Setup the Google Apps SAML App for AWS&lt;/h4&gt;

&lt;p&gt;You&amp;rsquo;ll need to configure your Google Apps account as a identity provider (or IdP) for AWS to use.&lt;/p&gt;

&lt;p&gt;Google has written some pretty good instructions for this &lt;a href=&#34;https://support.google.com/a/answer/6194963?hl=en&#34;&gt;here&lt;/a&gt;. Go check them out and run though them then come back here or follow my brief instructions below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login into your Google Apps Admin Console&lt;/li&gt;
&lt;li&gt;Head to the &lt;code&gt;Apps&lt;/code&gt; Section then &lt;code&gt;SAML Apps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add a Service/App to your domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Amazon Web Services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Download&lt;/code&gt; button next to the &lt;code&gt;IDP Metadata&lt;/code&gt; and save it somewhere for later&lt;/li&gt;
&lt;li&gt;If you want to change the Application Name, Description and Logo, otherwise continue on&lt;/li&gt;
&lt;li&gt;Setup the Service Provider Details&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;ACS URL&lt;/code&gt; and &lt;code&gt;Entity ID&lt;/code&gt; are set to &lt;code&gt;https://signin.aws.amazon.com/saml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Also make sure the &lt;code&gt;Start URL&lt;/code&gt; is blank and the &lt;code&gt;Signed Response&lt;/code&gt; is unchecked.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll want the &lt;code&gt;Name ID&lt;/code&gt; to be mapped to &lt;code&gt;Basic information: Primary Email&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the Attribute mapping up with the following:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://aws.amazon.com/SAML/RoleSessionName: Basic Information: Primary Email&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://aws.amazon.com/SAML/Role : SSO : Role&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click Finish&lt;/li&gt;
&lt;li&gt;Turn the App on, by clicking on the settings button, then &lt;code&gt;Turn ON for everyone&lt;/code&gt; Confirm the dialong when asked&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setting-up-the-idp-in-aws&#34;&gt;Setting up the IdP in AWS&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need to tell AWS that you want to use the GoogleApp you just set up as a IdP.
You can do that with the command below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# aws iam create-saml-provider --saml-metadata-document file://GoogleIDPMetadata-yourdomain.xml --name GoogleAppsProvider
{
    &amp;quot;SAMLProviderArn&amp;quot;: &amp;quot;arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you substitute &lt;code&gt;GoogleIDPMetadata-yourdomain.xml&lt;/code&gt; with the path to the IDP metadata file you downloaded earlier.&lt;/p&gt;

&lt;p&gt;This will spit out a response with the ARN of the identity provider you created, so make sure you note this down for later.&lt;/p&gt;

&lt;p&gt;####Create Some Roles
1. You&amp;rsquo;ll need to first craft a Trust Policy document to be used with the roles you&amp;rsquo;ll create. Create a new file called &lt;code&gt;GoogleApps_TrustPolicy.json&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
  {
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Principal&amp;quot;: {
      &amp;quot;Federated&amp;quot;: &amp;quot;&amp;lt;Replace Me with your IdP ARN&amp;gt;&amp;quot;
    },
    &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRoleWithSAML&amp;quot;,
    &amp;quot;Condition&amp;quot;: {
      &amp;quot;StringEquals&amp;quot;: {
        &amp;quot;SAML:aud&amp;quot;: &amp;quot;https://signin.aws.amazon.com/saml&amp;quot;
      }
    }
  }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you replace &lt;code&gt;&amp;lt;Replace Me with your IdP ARN&amp;gt;&lt;/code&gt; with the ARN of the identity provider you created earlier.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command to create the role. Note down the ARN that is returned as we&amp;rsquo;ll need it later&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# aws iam create-role --role-name GoogleAppsAdminDemo --assume-role-policy-document file://GoogleApps_TrustPolicy.json
{
  &amp;quot;Role&amp;quot;: {
  &amp;quot;AssumeRolePolicyDocument&amp;quot;: {
      &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
      &amp;quot;Statement&amp;quot;: [
          {
              &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRoleWithSAML&amp;quot;,
              &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
              &amp;quot;Condition&amp;quot;: {
                  &amp;quot;StringEquals&amp;quot;: {
                      &amp;quot;SAML:aud&amp;quot;: &amp;quot;https://signin.aws.amazon.com/saml&amp;quot;
                  }
              },
              &amp;quot;Principal&amp;quot;: {
                  &amp;quot;Federated&amp;quot;: &amp;quot;arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider&amp;quot;
              }
          }
      ]
  },
  &amp;quot;RoleId&amp;quot;: &amp;quot;AROAIYGHGSVXXXXXXXXXX&amp;quot;,
  &amp;quot;CreateDate&amp;quot;: &amp;quot;2016-03-10T12:19:31.177Z&amp;quot;,
  &amp;quot;RoleName&amp;quot;: &amp;quot;GoogleAppsAdminDemo&amp;quot;,
  &amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;,
  &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsAdminDemo&amp;quot;
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;At this stage, I&amp;rsquo;ve not attached any permissions to the role - you can read how to do that &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html#d0e18315&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;add-some-roles-to-your-google-apps-users&#34;&gt;Add some roles to your Google Apps Users&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://developers.google.com/admin-sdk/directory/v1/reference/users/patch#try-it&#34;&gt;Patch Users Page&lt;/a&gt; in the Google Admin Console&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;userKey&lt;/code&gt; put the email address of the user you want to update&lt;/li&gt;
&lt;li&gt;To the right of the Request body, select &lt;code&gt;Freeform Editor&lt;/code&gt; from the drop down list, and paste the following text, replace, and with the appropriate values you&amp;rsquo;ve collected before&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;customSchemas&amp;quot;:
  {
    &amp;quot;SSO&amp;quot;:
    {
      &amp;quot;role&amp;quot;: [
      {
       value: &amp;quot;&amp;lt;role ARN&amp;gt;,&amp;lt;provider ARN&amp;gt;&amp;quot;,
       customType: &amp;quot;SSO&amp;quot;
      }
     ]
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mine looked something like this (with two roles):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;customSchemas&amp;quot;:
  {
    &amp;quot;SSO&amp;quot;:
    {
      &amp;quot;role&amp;quot;: [
      {
       value: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsAdminDemo,arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider,
       customType: &amp;quot;SSO&amp;quot;
      },
      {
       value: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsUserDemo,arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider,
       customType: &amp;quot;SSO&amp;quot;
      }
     ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;Authorize and Execute&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;test-it-out&#34;&gt;Test it out&lt;/h3&gt;

&lt;p&gt;Open your Google Apps account and then select the &lt;code&gt;Amazon Web Services&lt;/code&gt; app. It should redirect you on to a page that lets you select Role to login with (only if you multiple Roles) otherwise it will just bring you to the AWS Console Homepage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS VPC VPN connection to Linode with GRE Tunnels</title>
      <link>http://blog.guthnur.net/aws-vpc-vpn-linode-gre/</link>
      <pubDate>Wed, 15 Jun 2016 15:11:09 -0400</pubDate>
      
      <guid>http://blog.guthnur.net/aws-vpc-vpn-linode-gre/</guid>
      <description>

&lt;p&gt;So we have started to migrate from &lt;a href=&#34;https://www.linode.com&#34;&gt;Linode&lt;/a&gt; to &lt;a href=&#34;https://aws.amazon.com&#34;&gt;Amazon Aws&lt;/a&gt; at work. We are using a specialized AWS VPC design to make our infrastructure faster and strong then we could at linode. Also more secure. One of the major issues had to overcome is the lack of being able to directly connect aws to linode and linode to aws. So with some magic and special sauce we was able to come up with the following solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RACOON + QUAGGA + GRE TUNNELS == FTW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So first you if your on linode you will need to make sure you do the following steps that will not be covered by this tutorial. One is get on the generic kernel and not the custom linode kernels. Second you will need to make sure you setup your VPC VPN configuration. I suggest you follow the following tutorial by &lt;a href=&#34;https://medium.com/@silasthomas/aws-vpc-ipsec-site-to-site-vpn-using-a-ubiquiti-edgemax-edgerouter-with-bgp-routing-37abafb950f3#.o1n31p7em&#34;&gt;Medium AWS VPC VPN with BGP&lt;/a&gt; It&amp;rsquo;s important that you follow the steps and download the generic configuration. You will need this later on in the tutorial. I am also assuming that you have multiple machines in Linode and they are debian/ubuntu based. You will want to spin up a box that will be labeled as your AWS gateway.&lt;/p&gt;

&lt;h4 id=&#34;racoon-setup&#34;&gt;Racoon Setup&lt;/h4&gt;

&lt;p&gt;You will need to install racoon first. Using &lt;code&gt;apt-get install ipsec-tools racoon&lt;/code&gt; if your runing RHEL based or BSD based you will need to google how to install racoon and ipsec-tools.&lt;/p&gt;

&lt;h4 id=&#34;quagga-setup&#34;&gt;Quagga Setup&lt;/h4&gt;

&lt;p&gt;You will need to install quagga first. Using &lt;code&gt;apt-get install quagga&lt;/code&gt; if your running RHEL based or BSD based you will need to google how to install quagga.&lt;/p&gt;

&lt;h3 id=&#34;configuration-of-racoon-and-quagga&#34;&gt;Configuration of Racoon and Quagga&lt;/h3&gt;

&lt;p&gt;Lucky enough I have written a script to make this a lot easy for you :) The following script will generate the racoon and quagga configuration for you.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/moos3/36c5bfc36e084e8c4ca18f44eb6f8292.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To run this script you are going to want to make sure you have copied your generic configuration text file to the machine your going to set up as your AWS VPC VPC gateway. Then edit this script and set the following Varaiables&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/moos3/bffb716f8add396fb6400868b77e754b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Once you have those set run the script like such &lt;code&gt;./vpnsetup.sh aws-configuration.txt&lt;/code&gt; Sit back and wait for it to parse and run. To check if it came up look at the following logs /var/log/quagga/bgp.log and if its successful you should see output like so:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/moos3/6bd0956e53d19479607825b8984eff35.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you have a node in your VPC you should be able to ping it from this box. Now you have successfully setup BGP and IPSEC on linux :) If you dont see this in your logs, then check the following things your BGP_ID vaule, or that your ipsec has come up. Use this command to check your racoon &lt;code&gt;racoonctl show-sa ipsec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###GRE setup and configuration
So the second part of this is to make other nodes talk to the AWS nodes from inside of linode. We will use GRE for this. First thing is to edit &lt;code&gt;/etc/modules&lt;/code&gt; and insert ip_gre in the file so the kenerl will load it up. Next you are going to want to pick a subnet size that will fit what your trying to do. I would stick with something not bigger than a /26. For this example we are going to use 10.10.0.0/26 for our GRE network. So in this example we will use two boxes to get started. I recommend that you use the following for box A (aws vpn gateway box)&lt;/p&gt;

&lt;p&gt;Remote needs to be set to the ip address of the box on the other end. Local is the local ip of box your adding the tunnel to.&lt;/p&gt;

&lt;p&gt;AWS vpn gateway box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip tunnel add gre-client mode gre remote 192.168.1.34 local 192.168.0.24 ttl 255
ip link set gre-client up
ip link set gre-client multicast on
ip addr add 10.10.0.1/26 broadcast 10.10.0.63 dev gre-client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Client box that needs to connect to aws:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip tunnel add gre-vpn remote 192.168.0.24 local 192.168.1.34 ttl 255
ip link set gre-vpn up
ip link set gre-vpn multicast on
ip addr add 10.10.0.2/27 broadcast 10.10.0.63 dev gre-vpn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you will need to add route on the client side that tells it how to route traffic for your aws network to the aws vpn gateway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip route add 172.16.0.0/16 via 10.10.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then on the AWS vpn gateway box we will need to update iptables with a SNAT rule. That will look like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -t nat -A POSTROUTING --src 10.10.0.0/26 --dst 172.16.0.0/16 -j SNAT --to-source 169.254.44.42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part here is that the dst is set to your aws vpc network and that to-source is the box which is running the bgp service. You can find this ip address in the logs for quagga looking for Zebra rcvd command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016/06/15 17:13:37 BGP: Zebra rcvd: interface eth0 address add 169.254.44.234/30
2016/06/15 17:13:37 BGP: Zebra rcvd: interface eth0 address add 169.254.44.42/30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to ping or traceroute to your AWS nodes in the vpc. If you can do this then your golden. Some things you might try if this doesn&amp;rsquo;t work. One add the following iptables rule in &lt;code&gt;iptables -A FORWARD -j LOG&lt;/code&gt; and this will log all the forwarded traffic. Two make sure that forwarding is on in sysctl.conf on both the gateway and client.&lt;/p&gt;

&lt;p&gt;Happy BGP&amp;rsquo;ing and GRE routing around a limitation on Linode. You could use this in many applications not just linode. Also a good read on GRE see &lt;a href=&#34;http://bjornruud.net/2011/02/gre-tunnel-with-multicast-support.html&#34;&gt;GRE Tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>