<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Moos3</title>
    <link>http://blog.guthnur.net/tags/technology/</link>
    <description>Recent content in Technology on Moos3</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Fri, 16 Sep 2016 16:19:59 -0400</lastBuildDate>
    <atom:link href="http://blog.guthnur.net/tags/technology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Setup Google SSO and AWS</title>
      <link>http://blog.guthnur.net/aws-google-sso/</link>
      <pubDate>Fri, 16 Sep 2016 16:19:59 -0400</pubDate>
      
      <guid>http://blog.guthnur.net/aws-google-sso/</guid>
      <description>

&lt;p&gt;This article contains the files needed to wire up our Google Apps SSO to aws. Enorder to setup the AWS sso in additional accounts you will need the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aws Account keys with Admin access&lt;/li&gt;
&lt;li&gt;Google Admin access&lt;/li&gt;
&lt;li&gt;aws cli tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup-google-apps&#34;&gt;Setup Google Apps&lt;/h2&gt;

&lt;p&gt;First we will need to setup a Custom Schema element to hold role information for our users. By default, when you map attributes for SAML apps the pass Role to AWS you&amp;rsquo;ll only be able to select from existing attribute on your users.
Examples include Job Title, Cost Center and Department. I&amp;rsquo;ve seen other articles that mention putting a signle role ARN in one of these but it&amp;rsquo;s really not suitable for that information (especially if you use those fields already).&lt;/p&gt;

&lt;h4 id=&#34;the-solution-is-to-setup-a-custom-attribute-https-support-google-com-a-answer-6327792-hl-en-for-your-users&#34;&gt;The Solution is to setup a &lt;a href=&#34;https://support.google.com/a/answer/6327792?hl=en&#34;&gt;Custom Attribute&lt;/a&gt; for your users.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://developers.google.com/admin-sdk/directory/v1/reference/schemas/insert#try-it&#34;&gt;Schema Insert Page&lt;/a&gt; in Google Admin Console&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;my_customer&lt;/code&gt; in &lt;code&gt;customerId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To the right of the Request Body, select &lt;code&gt;FreeForm Editor&lt;/code&gt; from the dropdown list and then pase the following (schemaName should be either SSO or AWS_SAML):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;fields&amp;quot;:
  [
    {
      &amp;quot;fieldName&amp;quot;: &amp;quot;role&amp;quot;,
      &amp;quot;fieldType&amp;quot;: &amp;quot;STRING&amp;quot;,
      &amp;quot;multiValued&amp;quot;: true,
      &amp;quot;readAccessType&amp;quot;: &amp;quot;ADMINS_AND_SELF&amp;quot;
    }
  ],
  &amp;quot;schemaName&amp;quot;: &amp;quot;SSO&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Then Click &lt;code&gt;Authorize and Execute&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-the-google-apps-saml-app-for-aws&#34;&gt;Setup the Google Apps SAML App for AWS&lt;/h4&gt;

&lt;p&gt;You&amp;rsquo;ll need to configure your Google Apps account as a identity provider (or IdP) for AWS to use.&lt;/p&gt;

&lt;p&gt;Google has written some pretty good instructions for this &lt;a href=&#34;https://support.google.com/a/answer/6194963?hl=en&#34;&gt;here&lt;/a&gt;. Go check them out and run though them then come back here or follow my brief instructions below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login into your Google Apps Admin Console&lt;/li&gt;
&lt;li&gt;Head to the &lt;code&gt;Apps&lt;/code&gt; Section then &lt;code&gt;SAML Apps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add a Service/App to your domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Amazon Web Services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Download&lt;/code&gt; button next to the &lt;code&gt;IDP Metadata&lt;/code&gt; and save it somewhere for later&lt;/li&gt;
&lt;li&gt;If you want to change the Application Name, Description and Logo, otherwise continue on&lt;/li&gt;
&lt;li&gt;Setup the Service Provider Details&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;ACS URL&lt;/code&gt; and &lt;code&gt;Entity ID&lt;/code&gt; are set to &lt;code&gt;https://signin.aws.amazon.com/saml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Also make sure the &lt;code&gt;Start URL&lt;/code&gt; is blank and the &lt;code&gt;Signed Response&lt;/code&gt; is unchecked.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll want the &lt;code&gt;Name ID&lt;/code&gt; to be mapped to &lt;code&gt;Basic information: Primary Email&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the Attribute mapping up with the following:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://aws.amazon.com/SAML/RoleSessionName: Basic Information: Primary Email&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://aws.amazon.com/SAML/Role : SSO : Role&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click Finish&lt;/li&gt;
&lt;li&gt;Turn the App on, by clicking on the settings button, then &lt;code&gt;Turn ON for everyone&lt;/code&gt; Confirm the dialong when asked&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setting-up-the-idp-in-aws&#34;&gt;Setting up the IdP in AWS&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need to tell AWS that you want to use the GoogleApp you just set up as a IdP.
You can do that with the command below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# aws iam create-saml-provider --saml-metadata-document file://GoogleIDPMetadata-yourdomain.xml --name GoogleAppsProvider
{
    &amp;quot;SAMLProviderArn&amp;quot;: &amp;quot;arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you substitute &lt;code&gt;GoogleIDPMetadata-yourdomain.xml&lt;/code&gt; with the path to the IDP metadata file you downloaded earlier.&lt;/p&gt;

&lt;p&gt;This will spit out a response with the ARN of the identity provider you created, so make sure you note this down for later.&lt;/p&gt;

&lt;p&gt;####Create Some Roles
1. You&amp;rsquo;ll need to first craft a Trust Policy document to be used with the roles you&amp;rsquo;ll create. Create a new file called &lt;code&gt;GoogleApps_TrustPolicy.json&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
  {
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Principal&amp;quot;: {
      &amp;quot;Federated&amp;quot;: &amp;quot;&amp;lt;Replace Me with your IdP ARN&amp;gt;&amp;quot;
    },
    &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRoleWithSAML&amp;quot;,
    &amp;quot;Condition&amp;quot;: {
      &amp;quot;StringEquals&amp;quot;: {
        &amp;quot;SAML:aud&amp;quot;: &amp;quot;https://signin.aws.amazon.com/saml&amp;quot;
      }
    }
  }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you replace &lt;code&gt;&amp;lt;Replace Me with your IdP ARN&amp;gt;&lt;/code&gt; with the ARN of the identity provider you created earlier.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command to create the role. Note down the ARN that is returned as we&amp;rsquo;ll need it later&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# aws iam create-role --role-name GoogleAppsAdminDemo --assume-role-policy-document file://GoogleApps_TrustPolicy.json
{
  &amp;quot;Role&amp;quot;: {
  &amp;quot;AssumeRolePolicyDocument&amp;quot;: {
      &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
      &amp;quot;Statement&amp;quot;: [
          {
              &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRoleWithSAML&amp;quot;,
              &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
              &amp;quot;Condition&amp;quot;: {
                  &amp;quot;StringEquals&amp;quot;: {
                      &amp;quot;SAML:aud&amp;quot;: &amp;quot;https://signin.aws.amazon.com/saml&amp;quot;
                  }
              },
              &amp;quot;Principal&amp;quot;: {
                  &amp;quot;Federated&amp;quot;: &amp;quot;arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider&amp;quot;
              }
          }
      ]
  },
  &amp;quot;RoleId&amp;quot;: &amp;quot;AROAIYGHGSVXXXXXXXXXX&amp;quot;,
  &amp;quot;CreateDate&amp;quot;: &amp;quot;2016-03-10T12:19:31.177Z&amp;quot;,
  &amp;quot;RoleName&amp;quot;: &amp;quot;GoogleAppsAdminDemo&amp;quot;,
  &amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;,
  &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsAdminDemo&amp;quot;
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;At this stage, I&amp;rsquo;ve not attached any permissions to the role - you can read how to do that &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html#d0e18315&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;add-some-roles-to-your-google-apps-users&#34;&gt;Add some roles to your Google Apps Users&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://developers.google.com/admin-sdk/directory/v1/reference/users/patch#try-it&#34;&gt;Patch Users Page&lt;/a&gt; in the Google Admin Console&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;userKey&lt;/code&gt; put the email address of the user you want to update&lt;/li&gt;
&lt;li&gt;To the right of the Request body, select &lt;code&gt;Freeform Editor&lt;/code&gt; from the drop down list, and paste the following text, replace, and with the appropriate values you&amp;rsquo;ve collected before&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;customSchemas&amp;quot;:
  {
    &amp;quot;SSO&amp;quot;:
    {
      &amp;quot;role&amp;quot;: [
      {
       value: &amp;quot;&amp;lt;role ARN&amp;gt;,&amp;lt;provider ARN&amp;gt;&amp;quot;,
       customType: &amp;quot;SSO&amp;quot;
      }
     ]
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mine looked something like this (with two roles):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;customSchemas&amp;quot;:
  {
    &amp;quot;SSO&amp;quot;:
    {
      &amp;quot;role&amp;quot;: [
      {
       value: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsAdminDemo,arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider,
       customType: &amp;quot;SSO&amp;quot;
      },
      {
       value: &amp;quot;arn:aws:iam::123456789012:role/GoogleAppsUserDemo,arn:aws:iam::123456789012:saml-provider/GoogleAppsProvider,
       customType: &amp;quot;SSO&amp;quot;
      }
     ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;Authorize and Execute&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;test-it-out&#34;&gt;Test it out&lt;/h3&gt;

&lt;p&gt;Open your Google Apps account and then select the &lt;code&gt;Amazon Web Services&lt;/code&gt; app. It should redirect you on to a page that lets you select Role to login with (only if you multiple Roles) otherwise it will just bring you to the AWS Console Homepage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ditched Verizon for Project-Fi</title>
      <link>http://blog.guthnur.net/ditched-vz-for-fi/</link>
      <pubDate>Mon, 12 Sep 2016 13:17:04 -0400</pubDate>
      
      <guid>http://blog.guthnur.net/ditched-vz-for-fi/</guid>
      <description>

&lt;p&gt;So I and my wife had it with paying $270/mo for Verizon Wireless every month. It makes it a pain because when we go near
the Canadian border up by my wife&amp;rsquo;s hometown, we had to call and pay 35/mo for international coverage. So I was told
about Project-Fi by an Android Developer at work. He said it was amazing, and I have to say he was 100% correct. We have coverage
just about everywhere in the world. Not to mention when we visit people that had shotty VZ coverage and there&amp;rsquo;s no USCC coverage
we just join their wifi network and BAM phone service!&lt;/p&gt;

&lt;p&gt;We have had the phones for a week. We went with the Nexus 5X. At first, we thought the 250 bucks for the phone was a joke, then we
realized that we are just used to paying 700 bucks for a phone or 31/mo for 24 months. It was just a shock even more of a shock than having
to make the switch from iPhones to Android. My wife has only ever known an iPhone and myself haven&amp;rsquo;t touched android since Eclair. The learning
curve was a little sharp but not that bad. There are some things we miss such as facetime&amp;rsquo;ing the family but its just a matter of them installing
hangouts or Duo as a replacement.&lt;/p&gt;

&lt;p&gt;As far as the phone the 5x&amp;rsquo;s screen is way better than the iPhone 6 or iPhone 6s&amp;rsquo;s screens could dream of. We also really love where the fingerprint
reader is. At first, when the Nexus came out and I saw where that was I was like that really odd placement. But then we got them I was like WOW that really
makes total sense. I have to say that the Nexus is probably one of the nicest phones I have used.&lt;/p&gt;

&lt;h4 id=&#34;service&#34;&gt;Service&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s talk about the service. So with FI we get coverage of US Cellular, T-Mobile, Sprint and WiFi calling. I have to say that having all these
services and the automatic switching is pretty sweet! The coolest feature I have to say is the seamless handoff between WiFi and Cellular. I was on
a call in my truck and then pulled in the driveway and all of sudden the call quality improved like crazy. It reminded me of the call quality between two iPhone 6&amp;rsquo;s.
I was on the phone in the house on wifi and was having to run to town and the call switched and I could notice the call quality dropped a little bit but no dropped calls.&lt;/p&gt;

&lt;p&gt;Another awesome feature about android is the Block/report spam feature. That is so awesome! Nothing makes me madder than someone calling me to offer
me a deal on a radical. One I am only 33 years old and I don&amp;rsquo;t need help getting around. My number is on the Federal list but that doesn&amp;rsquo;t seem to help. So now
I just hang up and then click on report spam / block caller. I never hear from them and they don&amp;rsquo;t waste my time.&lt;/p&gt;

&lt;p&gt;Another pretty kick ass feature is when you call a number to a business that isn&amp;rsquo;t in your contacts, google looks it up and updates the call history with the business name. Where has
this been for the past 5 years of my life? Google Now is really bad ass. I think it&amp;rsquo;s actually better than Siri. It&amp;rsquo;s way more useful than Siri.&lt;/p&gt;

&lt;h4 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h4&gt;

&lt;p&gt;So in my final Thoughts, this is my initial review of the service. I have already recommended it to about 30 people and about 10 have made the switch. I just
hope this isn&amp;rsquo;t one of the google projects that just goes away. I&amp;rsquo;m hoping google with keep this up and continue to add networks and services on this. A family
plan is in the works. Maybe add a tablet would be great too. I&amp;rsquo;m not saying drink the kool-aid of google but at least look at it if your sick of paying a TON for data.
We were paying 270/mo for 6Gb of data, we now spend 70 for two lines, 3GB of data. Our iPad for the little will now tether but will only cost us an additional 30 bucks for the data
versus 200 bucks to have the iPhones and iPad all share the same data. I made the switch, will you?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kubernetes installation on ubuntu</title>
      <link>http://blog.guthnur.net/kubernetes-ubuntu-installation/</link>
      <pubDate>Tue, 22 Dec 2015 11:32:51 -0800</pubDate>
      
      <guid>http://blog.guthnur.net/kubernetes-ubuntu-installation/</guid>
      <description>

&lt;p&gt;In this article I will show you how to setup kubernetes on ubuntu 14.04 or newer. I recently had to do this for a project.
Below are the steps to complete this with a example pod.&lt;/p&gt;

&lt;h3 id=&#34;steps&#34;&gt;steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Become Root&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Lets get the pre-requisite software packages installed&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
apt-get install ssh
apt-get install docker.io
apt-get install curl
apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Password-less ssh login setup, accept all the default parameters in the prompt of the below command (required for Kubernetes installation)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
e1:c9:a5:dd:80:ee:cd:f0:c8:11:6c:a5:d4:ba:ff:cc root@vkohli-Latitude-E7440
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|          ...    |
|         + o.    |
|        o B.     |
|       + B..+    |
|        S o..    |
|       . *..     |
|        . *.     |
|         .  .o   |
|             .E  |
+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Copy the ssh id_rsa key locally&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-copy-id -i /root/.ssh/id_rsa.pub 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case this fails you can do it by hand. By doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /root/.ssh/id_rsa.pub &amp;gt;&amp;gt; /root/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Validate the password-less ssh-login&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ ssh root@127.0.0.1
root@vkohli-virtual-machine:~$ exit
logout
Connection to 127.0.0.1 closed
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Get the Kubernetes release bundle from the official github repository&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v1.0.1/kubernetes.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Untar the Kubernetes bundle in the same directory&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ tar -xvf kubernetes.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;We will build the binaries of Kubernetes code specifically for ubuntu cluster&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ cd kubernetes/cluster/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute the following shell script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./build.sh
Download flannel release ...
Flannel version is 0.4.0
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                Dload  Upload   Total   Spent    Left  Speed
100   411    0   411    0     0    252      0 --:--:--  0:00:01 --:--:--   252
100 2393k  100 2393k    0     0   204k      0  0:00:11  0:00:11 --:--:--  388k
Download etcd release ...
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   410    0   410    0     0    272      0 --:--:--  0:00:01 --:--:--   272
100 3713k  100 3713k    0     0   286k      0  0:00:12  0:00:12 --:--:--  496k
Download kubernetes release ...
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                Dload  Upload   Total   Spent    Left  Speed
100   396    0   396    0     0    279      0 --:--:--  0:00:01 --:--:--   279
100 97.8M  100 97.8M    0     0   715k      0  0:02:20  0:02:20 --:--:--  501k
~/kubernetes/cluster/ubuntu/kubernetes/server ~/kubernetes/cluster/ubuntu
~/kubernetes/cluster/ubuntu
Done! All your commands locate in ./binaries dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shell script will download and build the latest version of K8s, etcd and flannel binaries which can be found at following location;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd binaries
$ ls
kubectl  master  minion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kubectl binary controls the Kubernetes cluster manager and the folder master &amp;amp; minion contains the binaries built for the purpose of configuring K8s master and node respectively.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure the cluster information by editing only the following parameters of the file &lt;code&gt;cluster/ubuntu/config-default.sh&lt;/code&gt; in the editor of your choice.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ vi kubernetes/cluster/ubuntu/config-default.sh
export nodes=&amp;quot;root@127.0.0.1&amp;quot;
export roles=&amp;quot;ai&amp;quot;
export NUM_MINIONS=${NUM_MINIONS:-1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only update the above mentioned information in the file, rest of the configuration will remain as it is. The first variable nodes defines all the cluster nodes, in our case same machine will be configured as master and node so it contains only one entry.The role below “ai” specifies that same machine will act as master, “a” stands for master and “i” stands for node.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, we will be starting the cluster with the following command;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ cd kubernetes/cluster
$ KUBERNETES_PROVIDER=ubuntu ./kube-up.sh
Starting cluster using provider: ubuntu
... calling verify-prereqs
... calling kube-up
FLANNEL_NET
172.16.0.0/16
Deploying master and minion on machine 127.0.0.1

config-default.sh                                                                                100% 2904     2.8KB/s   00:00
util.sh                                                                                          100%   13KB  13.4KB/s   00:00
flanneld.conf                                                                                    100%  569     0.6KB/s   00:00
kube-controller-manager.conf                                                                     100%  746     0.7KB/s   00:00
kube-apiserver.conf                                                                              100%  676     0.7KB/s   00:00
etcd.conf                                                                                        100%  576     0.6KB/s   00:00
kube-scheduler.conf                                                                              100%  676     0.7KB/s   00:00
kube-apiserver                                                                                   100% 2358     2.3KB/s   00:00
kube-controller-manager                                                                          100% 2672     2.6KB/s   00:00
etcd                                                                                             100% 2073     2.0KB/s   00:00
flanneld                                                                                         100% 2159     2.1KB/s   00:00
kube-scheduler                                                                                   100% 2360     2.3KB/s   00:00
reconfDocker.sh                                                                                  100% 1493     1.5KB/s   00:00
kube-proxy.conf                                                                                  100%  648     0.6KB/s   00:00
flanneld.conf                                                                                    100%  569     0.6KB/s   00:00
kubelet.conf                                                                                     100%  634     0.6KB/s   00:00
etcd.conf                                                                                        100%  576     0.6KB/s   00:00
kube-proxy                                                                                       100% 2230     2.2KB/s   00:00
etcd                                                                                             100% 2073     2.0KB/s   00:00
flanneld                                                                                         100% 2159     2.1KB/s   00:00
kubelet                                                                                          100% 2162     2.1KB/s   00:00
kube-apiserver                                                                                   100%   34MB  33.7MB/s   00:00
kube-controller-manager                                                                          100%   26MB  26.2MB/s   00:00
etcdctl                                                                                          100% 6041KB   5.9MB/s   00:00
etcd                                                                                             100% 6494KB   6.3MB/s   00:00
flanneld                                                                                         100% 8695KB   8.5MB/s   00:00
kube-scheduler                                                                                   100%   17MB  17.0MB/s   00:00
kube-proxy                                                                                       100%   17MB  16.8MB/s   00:00
etcdctl                                                                                          100% 6041KB   5.9MB/s   00:00
etcd                                                                                             100% 6494KB   6.3MB/s   00:00
flanneld                                                                                         100% 8695KB   8.5MB/s   00:00
kubelet                                                                                          100%   33MB  33.2MB/s   00:01
[sudo] password to copy files and start node:
etcd start/running, process 1125
Connection to 127.0.0.1 closed.
Validating master
Validating root@127.0.0.1

Kubernetes cluster is running.  The master is running at:

  http://127.0.0.1

FLANNEL_NET
172.16.0.0/16
Using master 127.0.0.1
Wrote config for ubuntu to /home/root/.kube/config
... calling validate-cluster

Waiting for 1 ready nodes. 0 ready nodes, 0 registered. Retrying.
Found 1 nodes.
        NAME        LABELS                             STATUS
1       127.0.0.1   kubernetes.io/hostname=127.0.0.1   Ready
Validate output:
NAME                 STATUS    MESSAGE   ERROR
scheduler            Healthy   ok        nil
etcd-0               Healthy   {&amp;quot;action&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;node&amp;quot;:{&amp;quot;dir&amp;quot;:true,&amp;quot;nodes&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;/registry&amp;quot;,&amp;quot;dir&amp;quot;:true,&amp;quot;modifiedIndex&amp;quot;:3,&amp;quot;createdIndex&amp;quot;:3},{&amp;quot;key&amp;quot;:&amp;quot;/coreos.com&amp;quot;,&amp;quot;dir&amp;quot;:true,&amp;quot;modifiedIndex&amp;quot;:16,&amp;quot;createdIndex&amp;quot;:16}]}}
                     nil
controller-manager   Healthy   ok        nil
Cluster validation succeeded
Done, listing cluster services:

Kubernetes master is running at http://127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See Part 2 for setting up the server for starting up on reboot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>letsencrypt yay</title>
      <link>http://blog.guthnur.net/letsencrypt-yay/</link>
      <pubDate>Sun, 15 Nov 2015 13:10:41 -0800</pubDate>
      
      <guid>http://blog.guthnur.net/letsencrypt-yay/</guid>
      <description>

&lt;h3 id=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/h3&gt;

&lt;p&gt;This is a amazing product that is opensource. I recently decided that this was going to be the way I get my ssl certificates for everything I do. I was
lucky to get into the beta invitation only. It works great. Every 90 days you have regen your certificates but thats not a big deal because they give you
tools to do it.&lt;/p&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;p&gt;So you get this going to your going to need to check out their repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/letsencrypt/letsencrypt
  cd letsencrypt
  ./letsencrypt-auto --server \
      https://acme-v01.api.letsencrypt.org/directory --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next after you get your domains submitted for the beta and registered you will want to do the following commands. Heres how for apache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto --apache --server https://acme-v01.api.letsencrypt.org/directory --agree-dev-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For standalone Apache you would do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto certonly -a standalone \
  -d example.com -d www.example.com \
  --server https://acme-v01.api.letsencrypt.org/directory --agree-dev-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your like me and use nginx for your server you will need to do the following to get it working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto certonly -a manual -d www.stbtx.com -d example.com -d blog.example.com --webroot-path /var/www/html --server https://acme-v01.api.letsencrypt.org/directory --agree-dev-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will need to do the following openssl command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl dhparam -out dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the Nginx server block add the following SSL configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# SSL configuration
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	ssl_certificate /etc/letsencrypt/live/{domain}/fullchain.pem;
    	ssl_certificate_key /etc/letsencrypt/live/{domain}/privkey.pem;
    	ssl_session_timeout 1d;
    	ssl_session_cache shared:SSL:10m;
    	ssl_session_tickets off;
	    # openssl dhparam -out dhparam.pem 2048
    	ssl_dhparam /etc/nginx/dhparam.pem;

    	ssl_protocols TLSv1.1 TLSv1.2;
    	ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK&#39;;
    	ssl_prefer_server_ciphers on;

    	add_header Strict-Transport-Security max-age=15768000;

    	ssl_stapling on;
    	ssl_stapling_verify on;

    	## verify chain of trust of OCSP response using Root CA and Intermediate certs
    	#ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates; ## Addition CA certs
    	ssl_trusted_certificate /etc/letsencrypt/live/{domain}/chain.pem;
    	resolver 8.8.8.8 8.8.4.4 valid=86400;
	resolver_timeout 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart your nginx server and you will be golden. This will support HSTS, SPDY and SSL.&lt;/p&gt;

&lt;p&gt;There you have deployed letencrypt certificates to your server woot! :) Great job!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>